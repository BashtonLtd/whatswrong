#!/bin/bash

# (C) Copyright Bashton Ltd 2012
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as 
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

COLOUR=1
BADCOUNT=0

### Generic functions
output() {
  OUTPUT="$1"
}

ok() {
  if [ $COLOUR -eq 1 ]; then
    echo -e "\033[32m✓ \033[00m $OUTPUT"
  else
    echo "OK: $OUTPUT"
  fi
  unset OUTPUT
}

bad() {
  if [ $COLOUR -eq 1 ]; then
    echo -e "\033[31m✘ \033[00m $OUTPUT"
  else
    echo "ERROR: $OUTPUT"
  fi
  unset OUTPUT
  BADCOUNT=$(($BADCOUNT+1))
}

total_bad() {
  echo
  echo "Found $BADCOUNT potential problem(s)"
}

percentage() {
  # Given the total and the max, returns an integer percentage
  echo "scale=2; $1 / $2 * 100" | bc | sed -e 's/\..*//'
}

### Disk checks

uncorrectable_drive_error() {
  output "No uncorrectable drive errors"
  if dmesg | grep -q 'UncorrectableError'; then
    bad
  else
    ok
  fi
}

disk_full() {
  output "All volumes have free space"
  if df | awk '{print $5}' | egrep -q '(100|99)%'; then
    bad
  else
    ok
  fi
}

inode_full() {
  output "All volumes have free inodes (where applicable)"
  if df -i | awk '{print $5}' | egrep -q '(100|99)%'; then
    bad
  else
    ok
  fi
}

remounted_ro() {
  output "No volumes have been remounted read only"
  if dmesg | grep -q 'Remounting filesystem read-only'; then
    bad
  else
    ok
  fi
}


### VM checks
oom_hit() {
  output "OOM killer has not been triggered"
  if dmesg | grep -q 'invoked oom-killer'; then
    bad
  else
    ok
  fi
}

high_swap() {
  output "Swap usage below 25%"
  total=$(grep 'SwapTotal' /proc/meminfo  | awk '{print $2}')
  used=$(grep 'SwapFree' /proc/meminfo  | awk '{print $2}')
  if [ $(percentage $used $total) -lt 75 ]; then
    bad
  else
    ok
  fi
}

nfs_timeout() {
  output "No NFS timeouts"
  if dmesg | egrep -q "nfs: server .* not responding"; then
    bad
  else
    ok
  fi
}

### Global and kernel checks
recently_rebooted() {
  output "Server has been running more than 30 minutes"
  if [ $(cat /proc/uptime | sed -e 's/\..*//') -lt 1800 ]; then
    bad
  else
    ok
  fi
}

hung_task() {
  output "No hung tasks"
  if dmesg | grep -q "hung_task_timeout_secs"; then
    bad
  else
    ok
  fi
}

### Process checks

# Process checks should only report a problem if a service is
# installed but not running

check_running() {
  if [ $(pgrep $1 | wc -l) -lt 1 ]; then
    bad
  else
    ok
  fi
}

apache_check() {
  if [ -x /usr/sbin/apache2 ]; then
    # Debian derived, Apache installed
    psname=apache2
  elif [ -x /usr/sbin/httpd ]; then
    # RedHat style
    psname=httpd
  else
    # No Apache installed
    return
  fi
  output "Apache running"
  check_running $psname
  unset psname
}

varnish_check() {
  if [ -x /usr/sbin/varnishd ]; then
    output "Varnish running"
    check_running varnishd
  fi
}

nginx_check() {
  if [ -x /usr/sbin/nginx ]; then
    output "nginx running"
    check_running nginx
  fi
}

mysql_check() {
  if [ -x /usr/sbin/mysqld ]; then
    output "MySQL running"
    check_running mysqld
  fi
}

echo "### Global checks"
recently_rebooted
hung_task
echo "### VM checks"
oom_hit
high_swap
echo "### FS checks"
uncorrectable_drive_error
remounted_ro
disk_full
inode_full
nfs_timeout
echo "### Process checks"
apache_check
varnish_check
nginx_check
mysql_check

total_bad
